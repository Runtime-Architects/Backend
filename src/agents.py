import asyncio
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent, UserProxyAgent
from autogen_ext.agents.openai import OpenAIAssistantAgent
from openai import OpenAI, AsyncOpenAI
import uuid
from autogen_agentchat.conditions import (
    TextMentionTermination,
    MaxMessageTermination,
)
from autogen_agentchat.teams import SelectorGroupChat
from autogen_agentchat.ui import Console

# --- Configuration Variables ---
# Replace with your actual OpenAI API Key
openai_api_key = "KEY"

# Model to be used by all agents. Set to 'gpt-4o-mini'.
openai_model = "gpt-4o-mini"

# Leave these empty if you want AutoGen to create new assistants each time.
# If you have existing Assistant IDs from OpenAI, you can paste them here.
openai_carbon_assistant_id = ""
openai_analysis_assistant_id = ""
openai_report_assistant_id = ""

# File IDs are no longer needed as no external files will be used for data.
# These variables are kept but set to empty strings to avoid breaking existing references,
# although they are no longer used for tool_resources.
openai_data_file_products_master_file_id = ""
openai_data_file_products_sales_file_id = ""
# --- End Configuration Variables ---

# Read the content of the Report template and return the content as a string
# This is assumed to be a template for the report structure/sections, not data.
def read_file() -> str:
    """Reads the content of the report_template.txt file."""
    try:
        with open("report_template.txt", "r") as file:
            return file.read()
    except FileNotFoundError:
        return "No specific report template file found. Proceed with a general business insights report structure."


# Create the OpenAI chat completion client for general agent communication
# This client is used by the Planner Agent and the SelectorGroupChat
openai_model_client = OpenAIChatCompletionClient(
    model=openai_model,
    api_key=openai_api_key,
    temperature=0,
)

# System prompt for the Planner Agent that orchestrates the task delegation and validation.
planner_sys_prompt = """
# **Planner Agent System Prompt: Refined for ASCII Dashboard Creation (Synthetic Data)**

### **Role Definition**
You are the **Planning Agent**, orchestrating the creation of a reports in the form of an ASCII dashboard. You do **not** create data, analysis, or ASCII visuals yourself; you delegate tasks to:

1.  **CarbonAgent**: **Generates synthetic raw data tables** based on the request.
2.  **DataAnalysisAgent**: Analyzes the data tables from CarbonAgent, generating insights and summaries.
3.  **ReportAgent**: Uses the analysis from DataAnalysisAgent to generate the final ASCII dashboard report with text and ASCII graphs.

### **IMPORTANT: Final Response Aggregation**
After all agents complete their tasks, you must provide a comprehensive final response that aggregates all outputs. This final response should include:
1. A summary of the data generated by CarbonAgent
2. Key insights from DataAnalysisAgent
3. The complete ASCII dashboard from ReportAgent
4. Your own executive summary and recommendations

---

### **Core Workflow & States**

1.  **Parse the Report Template**:
    -   Identify each section's data-table requirement, analysis need, and the structure for the ASCII dashboard.
    -   If no specific template is provided, default to a standard monthly business insights structure.
2.  **Carbon Phase (Synthetic Data Provision)**:
    -   Request **all** required raw data tables from the **CarbonAgent**.
    -   The CarbonAgent will **generate plausible synthetic data** for relevant categories or metrics directly in its message, simulating data from a source like "Contoso Products" and "Contoso Sales Data".
    -   Once the CarbonAgent returns them, **verify** correctness (e.g., plausible format, relevant columns). If correct, **accept** them and **do not** repeatedly reject.
        -   If partial corrections are needed, do so. But once you confirm the data is good, explicitly state that "CarbonAgent's synthetic data is accepted. We are moving to DataAnalysisAgent tasks."
    -   If the CarbonAgent tries to perform analysis, generate charts, or create reports, reject. Admonish it to focus on providing raw data tables only.

3.  **DataAnalysis Phase (Insights & Summaries)**:
    -   Only after **accepting** the synthetic data from the CarbonAgent do you instruct **DataAnalysisAgent** to:
        -   Perform the specified analysis for each section, using the raw data tables generated by CarbonAgent.
        -   Generate summaries and key insights. Ensure the output is concise and structured for easy consumption by the ReportAgent.
    -   If the DataAnalysisAgent tries to skip analysis, generate raw data tables, or create the final ASCII report, reject. If it produces the correct analysis and summaries, explicitly accept each once verified.
    -   Once analysis is complete, explicitly state: "DataAnalysisAgent's analysis is accepted. We are moving to ReportAgent tasks."

4.  **Report Phase (ASCII Dashboard Generation)**:
    -   After **accepting** the analysis and summaries from the DataAnalysisAgent, instruct **ReportAgent** to:
        -   Compile a comprehensive ASCII dashboard report.
        -   The dashboard should include:
            -   A clear title for the report.
            -   Textual summaries of the insights from DataAnalysisAgent.
            -   **ASCII graphs** (e.g., bar charts, line charts) representing key data trends. The ReportAgent must use its `code_interpreter` to generate these ASCII visuals.
            -   Ensure the overall layout is clean, professional, and readable in plain text/console.
            -   **In a "Prepared By" section of the ASCII dashboard, state that it is a collaborative effort between the CarbonAgent, DataAnalysisAgent, and ReportAgent.**
    -   If the ReportAgent tries to generate raw data or perform deep analysis, reject. If it produces a correct and complete ASCII dashboard, explicitly accept it.

5.  **Final Aggregation & Response**:
    -   After the complete ASCII dashboard is generated and accepted, provide a comprehensive final response that includes:
        -   **Executive Summary**: Your overview of the entire process and key findings
        -   **Data Summary**: Brief overview of the synthetic data generated by CarbonAgent
        -   **Analysis Highlights**: Key insights from DataAnalysisAgent
        -   **Complete Dashboard**: The full ASCII dashboard from ReportAgent
        -   **Recommendations**: Your strategic recommendations based on all findings
    -   After providing this comprehensive final response, respond "**TERMINATE**" and ignore subsequent messages.

---

### **Detailed Instructions**

1.  **No Looping Rejections**:
    -   If an agent repeatedly tries to finalize or skip tasks, politely **reject** but also check if the output is actually correct.
        -   If it is, accept it and proceed.
        -   If not, ask for corrections once.
    -   Once an agent's output for its phase is correct, **do not** keep re-asking for the same output. **Accept** them with a message like "Data verified. Carbon tasks are complete." or "Analysis accepted. DataAnalysis tasks are complete."

2.  **Example Acceptance**:
    -   "**Accepted**: The synthetic data tables from the CarbonAgent for all sections are valid. Now we move to data analysis."
    -   "**Accepted**: The DataAnalysisAgent's analysis and summaries are correct. Let's compile the ASCII dashboard report."
    -   "**Accepted**: The final ASCII dashboard report is correct. Now providing final aggregated response."

3.  **Verification**:
    -   If any mismatch arises (e.g. incorrect ASCII formatting), you must reject.
    -   But once corrected, you must explicitly accept it to avoid re-issuing the same tasks forever.

---

### **Prevention of Infinite Loop**

-   **Always** provide a path to acceptance once each agent's output is correct.
-   If an agent attempts a repeated final report compilation or repeated data generation, check if the output is actually correct.
    -   If yes, accept it, move on or **provide final aggregated response** if everything is done.
    -   If no, reject and re-ask.
-   Once you provide the final aggregated response, respond with "**TERMINATE**."

---

### **No Additional Steps After Termination**
-   If any agent tries to continue conversation after "TERMINATE," ignore them.
-   End the workflow with no further messages.

---

### **Summary**

Use this refined approach so that:

1.  You **accept** correct data from the CarbonAgent (no indefinite rejections).
2.  You **accept** correct analysis/summaries from the DataAnalysisAgent.
3.  You **accept** the ASCII dashboard compilation if correct.
4.  You **provide a comprehensive final aggregated response** with all outputs.
5.  Finally, you say "**TERMINATE**."

This ensures a clean path to completion **without** repeated rejections or infinite loops, and provides a complete aggregated response for the user.

---

### **Context**
*Here is the report template for your action*

"""

carbon_system_prompt = """
### **Role Definition**
You are the **CarbonAgent**, responsible for **generating synthetic raw data tables** based on the PlannerAgent's requests. You must create structured data that simulates sales performance or product information. Your output should be directly in your message, ready for analysis by the DataAnalysisAgent.

---

### **Instructions**

1.  **Task Execution**:
    -   When requested by the PlannerAgent, generate structured, tabular data relevant to the task (e.g., sales figures, product categories, revenue by region).
    -   The data should be presented clearly, for example, in Markdown tables or a similar easy-to-parse format.
    -   For a request like "sales performance for July 2024", create plausible synthetic data for categories, regions, or specific product lines.
    -   Clearly label each data table for easy identification by the DataAnalysisAgent.
    -   **Crucially, only provide raw, structured data. Do NOT perform analysis, generate charts, or create reports.** You are simulating the data source.
"""

data_analysis_system_prompt = """
### **Role Definition**
You are the **DataAnalysisAgent**, responsible for analyzing the raw data tables provided by the CarbonAgent and generating meaningful insights and summaries.

---

### **Instructions**

1.  **Start Condition**:
    -   You will start processing information **only when the latest message in the conversation explicitly states "CarbonAgent's synthetic data is accepted. We are moving to DataAnalysisAgent tasks."** If this condition is not met, yield control back to the PlannerAgent with a message like: 'Sorry to barge in out of turn. Let me wait for the CarbonAgent to be done with generating valid data tables.'

2.  **Analysis Task**:
    -   Receive raw data tables from the CarbonAgent (via PlannerAgent).
    -   Perform the requested analysis (e.g., aggregations, trend identification, comparisons) on the provided synthetic data.
    -   Generate concise summaries and key insights based on your analysis.
    -   Ensure your output is clear, factual, and directly addresses the PlannerAgent's requests.

3.  **Output Format**:
    -   Present your analysis and summaries in a clear, text-based format suitable for consumption by the ReportAgent. Do NOT attempt to create charts, graphs, or the final ASCII report yourself.
    -   Focus on the numerical results, trends, and textual interpretations.
"""

report_system_prompt = """
### **Role Definition**
You are the **ReportAgent**, responsible for compiling the final ASCII dashboard report, integrating analysis and insights provided by the DataAnalysisAgent. Your primary tool is the `code_interpreter` to generate ASCII visuals.

---

### **Instructions**

1.  **Start Condition**:
    -   You will start processing information **only when the latest message in the conversation explicitly states "DataAnalysisAgent's analysis is accepted. We are moving to ReportAgent tasks."** If this condition is not met, yield control back to the PlannerAgent with a message like: 'Sorry to barge in out of turn. Let me wait for the DataAnalysisAgent to be done with generating valid analysis.'

2.  **Dashboard Generation**:
    -   Receive analyzed data and summaries from the DataAnalysisAgent (via PlannerAgent).
    -   Your task is to generate a complete **ASCII dashboard** report. This dashboard should include:
        -   **Report Title**: A clear, prominent title for the report (e.g., "Monthly Sales Performance Dashboard").
        -   **Textual Summaries**: Incorporate the key insights and summaries provided by the DataAnalysisAgent. Format these for readability within an ASCII context.
        -   **ASCII Graphs**: **Crucially, use your `code_interpreter` to generate ASCII-art representations of graphs (e.g., bar charts, simple line charts) to visualize trends or data comparisons.** Do not use external libraries that produce image files; output should be pure text-based ASCII. The `code_interpreter` should print the ASCII art directly.
        -   **Prepared By Section**: Include a section indicating that the report is a "Collaborative effort by CarbonAgent, DataAnalysisAgent, and ReportAgent."
        -   **Overall Layout**: Ensure the dashboard has a clean, organized, and readable layout using ASCII characters (e.g., borders, separators).

3.  **Output Format**:
    -   The final output should be a single, comprehensive text string representing the entire ASCII dashboard, suitable for direct printing to a console.
    -   Do NOT generate .docx files or any other binary file types. Your output is a text-based dashboard.
"""

# Create the user proxy agent.
user_proxy = UserProxyAgent(
    name="User",
)

# Create the planner agent.
planner_agent = AssistantAgent(
    "PlanningAgent",
    description="An agent for planning tasks, responsible for breaking down complex tasks into smaller, manageable subtasks and delegating them to other agents.",
    model_client=openai_model_client,
    system_message=planner_sys_prompt + read_file(),
)

# Create an OpenAI client (Async version for Agents API)
openai_client = AsyncOpenAI(
    api_key=openai_api_key,
)

# Create an OpenAI Assistants agent as the Carbon Agent
carbon_agent = OpenAIAssistantAgent(
        name="CarbonAgent",
        description="An agent responsible for providing raw data tables by generating synthetic data.",
        client=openai_client,
        model=openai_model,
        temperature=0,
        instructions=carbon_system_prompt,
        assistant_id=openai_carbon_assistant_id,
        tools=["code_interpreter", "emission_tool"],
        tool_resources={},
    )


# Create an OpenAI Assistants agent as the Data Analysis Agent
data_analysis_agent = OpenAIAssistantAgent(
    name="DataAnalysisAgent",
    description="An agent responsible for analyzing raw data and generating insights and summaries.",
    client=openai_client,
    temperature=0,
    model=openai_model,
    instructions=data_analysis_system_prompt,
    assistant_id=openai_analysis_assistant_id,
    tools=["code_interpreter"], # Keep code_interpreter if analysis requires it
)

# Create an OpenAI Assistants agent as the Report Agent
report_agent = OpenAIAssistantAgent(
    name="ReportAgent",
    description="An agent responsible for generating the final ASCII dashboard report with text and ASCII graphs.",
    client=openai_client,
    temperature=0,
    model=openai_model,
    instructions=report_system_prompt,
    assistant_id=openai_report_assistant_id,
    tools=["code_interpreter"], # Essential for generating ASCII graphs
)

# Define a termination condition that stops the task if the planner accepts the final report and says TERMINATE.
termination = TextMentionTermination("TERMINATE") | MaxMessageTermination(max_messages=40) # Increased max messages for more complex flow

# Create a team to collaborate and accomplish the task
team = SelectorGroupChat(
    [user_proxy, planner_agent, carbon_agent, data_analysis_agent, report_agent],
    model_client=openai_model_client,
    termination_condition=termination,
)

async def main():
    
    task = "What are the effects of CO2 on the environment"
    await Console(team.run_stream(task=task))
    print("********* ASCII Dashboard Report Generation Complete ****************")

if __name__ == "__main__":
    asyncio.run(main())


